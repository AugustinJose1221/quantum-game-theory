{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from QuantumGameCircuit import QuantumGameCircuit\n",
    "from qiskit.extensions import XGate\n",
    "from qiskit.quantum_info import Operator\n",
    "from qiskit import Aer, execute\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.69351992-0.13794969j  0.13794969+0.69351992j]\n",
      " [-0.13794969+0.69351992j  0.69351992+0.13794969j]]\n"
     ]
    }
   ],
   "source": [
    "I = np.matrix('1 0; 0 1') \n",
    "X = np.matrix('0 1; 1 0')\n",
    "Y = np.matrix('0 -1j; 1j 0')\n",
    "Z = np.matrix('1 0; 0 -1')\n",
    "\n",
    "\n",
    "import math\n",
    "a = (1/math.sqrt(2))*math.cos(math.pi/16)*(I+1j*X)+(1/math.sqrt(2))*math.sin(math.pi/16)*(1j*Y-1j*Z)\n",
    "print (a)\n",
    "op = Operator(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "operator_list = [[op],[],[],[]]\n",
    "circ = QuantumGameCircuit(operator_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1300.32x325.08 with 1 Axes>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "circ.circuit.draw(output='mpl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.+0.j 0.+0.j 0.+0.j 0.+0.j 0.+0.j 0.+0.j 0.+0.j 0.+0.j 0.+0.j 0.+0.j\n",
      " 0.+0.j 0.+0.j 0.+0.j 0.+0.j 0.+0.j 0.+0.j]\n"
     ]
    }
   ],
   "source": [
    "backend = Aer.get_backend('statevector_simulator')\n",
    "job_sim = execute(circ.circuit, backend)\n",
    "result_sim = job_sim.result()\n",
    "\n",
    "outputstate = result_sim.get_statevector(circ.circuit, decimals=3)\n",
    "print(outputstate)\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'1110': 1, '1111': 60, '0000': 39}\n"
     ]
    }
   ],
   "source": [
    "backend = Aer.get_backend(\"qasm_simulator\")\n",
    "job_sim = execute(circ.circuit, backend, shots=100)\n",
    "result_sim = job_sim.result()\n",
    "\n",
    "counts = result_sim.get_counts(circ.circuit)\n",
    "print(counts)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:quantum-computation-env] *",
   "language": "python",
   "name": "conda-env-quantum-computation-env-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
